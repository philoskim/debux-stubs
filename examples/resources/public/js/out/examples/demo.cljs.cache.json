["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$clog","~$debux.cs.core","~$dbgn","^4","~$my-let","~$examples.macro","~$dbg","^4","~$clogn","^4","~$break","^4"],"~:excludes",["~#set",[]],"~:name","~$examples.demo","~:imports",null,"~:requires",["^ ","~$d","^4","^4","^4"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$a",["^ ","^=","~$examples.demo/a","~:file","src/cljs/examples/demo.cljs","~:line",38,"~:column",1,"~:end-line",38,"~:end-column",7,"~:meta",["^ ","^E","/home/philos/work/all/philos/debux-stubs/examples/src/cljs/examples/demo.cljs","^F",38,"^G",6,"^H",38,"^I",7],"~:tag","~$any"],"~$my-fun2",["^ ","~:protocol-inline",null,"^J",["^ ","^E","/home/philos/work/all/philos/debux-stubs/examples/src/cljs/examples/demo.cljs","^F",69,"^G",7,"^H",69,"^I",14,"~:arglists",["~#list",["~$quote",["^P",[["~$a",["^ ","~:keys",["~$b","~$c","~$d"],"~:or",["^ ","~$d",10,"~$b",20,"~$c",30]],["~$e","~$f","~$g","~$&","~$h"]]]]]]],"^=","~$examples.demo/my-fun2","~:variadic",false,"^E","src/cljs/examples/demo.cljs","^I",14,"~:method-params",["^P",[["~$a","~$p__19679","~$p__19680"]]],"~:protocol-impl",null,"~:arglists-meta",["^P",[null,null]],"^G",1,"^F",69,"^H",69,"~:max-fixed-arity",3,"~:fn-var",true,"^O",["^P",["^Q",["^P",[["~$a",["^ ","^R",["~$b","~$c","~$d"],"^S",["^ ","~$d",10,"~$b",20,"~$c",30]],["~$e","~$f","~$g","~$&","~$h"]]]]]]],"~$my-fun3",["^ ","^N",null,"^J",["^ ","^E","/home/philos/work/all/philos/debux-stubs/examples/src/cljs/examples/demo.cljs","^F",76,"^G",7,"^H",76,"^I",14,"^O",["^P",["^Q",["^P",[[]]]]]],"^=","~$examples.demo/my-fun3","^U",false,"^E","src/cljs/examples/demo.cljs","^I",14,"^V",["^P",[[]]],"^Y",null,"^Z",["^P",[null,null]],"^G",1,"^F",76,"^H",76,"^[",0,"^10",true,"^O",["^P",["^Q",["^P",[[]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^7","^7","~$d","^4","^4","^4"],"~:cljs.analyzer/constants",["^ ","~:seen",["^<",["~:warn","~:c","~:b","~:d","~:a","~:love"]],"~:order",["^17","^18","~:a","~:b","~:c","~:d"]],"~:doc",null]